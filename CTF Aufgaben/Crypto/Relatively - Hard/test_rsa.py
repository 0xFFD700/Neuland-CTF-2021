
from Crypto.Util.number import *
import gmpy2
import binascii
import math 


n1=0xcfc59d54b4b2e9ab1b5d90920ae88f430d39fee60d18dddbc623d15aae645e4e50db1c07a02d472b2eebb075a547618e1154a15b1657fbf66ed7e714d23ac70bdfba4c809bbb1e27687163cb09258a07ab2533568192e29a3b8e31a5de886050b28b3ed58e81952487714dd7ae012708db30eaf007620cdeb34f150836a4b723
e1=0x1695ea
n2=0xd45304b186dc82e40bd387afc831c32a4c7ba514a64ae051b62f483f27951065a6a04a030d285bdc1cb457b24c2f8701f574094d46d8de37b5a6d55356d1d368b89e16fa71b6603bd037c7f329a3096ce903937bb0c4f112a678c88fd5d84016f745b8281aea8fd5bcc28b68c293e4ef4a62a62e478a8b6cd46f3da73fa34c63
e2=0x1f9096


print("e1 ",e1)
print("e2",e2)

fl = b"nland{R3latively_Prim3}"
flag = bytes_to_long(fl)

c1 = pow(flag,e1,n1)
c2 = pow(flag,e2,n2)

print("c1: ",hex(c1))
print("c2: ",hex(c2))


""" #cd(e1,(p1-1)*(q1-1))==14
#cd(e2,(p2-1)*(q2-1))==14



#https://www.programmersought.com/article/62374777750/

#('n1=', '0xbf510b8e2b169fbce366eb15a4f6c71b370f02f2108c7feb482234a386185bce1a740fa6498e04edbdf2a639e320619d9f39d3e740ebaf578af0426bc3e851001a1d599108a08725347f6680a7f5581a32d91505023701872c3df723e8de9f201d3b17059bebff944b915045870d757eb6d6d009eb4561cc7e4b89968e4433a9L')
#134347073075170257766215803099362418004065425530748344859294067268860704228688711795344357229542168667648374429443746436581339213103304763736490410141964725839523544574288634226696517385405332068833181257936747107798079105631550517632340006596411770391564782381584111041307543024000692535332539762223924655017
#('e1=', '0x15d6439c6')
#5861816774
#('c1=', '0x43e5cc4c99c3040aef2ccb0d4c45266f6b75cd7f9f1be105766689283f0886061c9cd52ac2b2b6c1b7d250c2079f354ca9b988db5556336201f3b5e489916b3b60b80c34bef8f608d7471fafaf14bee421b60630f42c5cc813356e786ff10e5efa334b8a73b7ea06afa6043f33be6a31010d306ba60516243add65c183da843aL')
#47679350303591323030509927007266764695711426045517386094533950185746224485916006725669281673432127297024107025003548647020559606080735523582879012530064270044883331854938311338075934127956058066031683305029642774439329115724024137272246089775960787415055989047103062793864918604473341972877616325645227951162
#('n2=', '0xba85d38d1bfc3fb281927c9246b5b771ac3344ca9fe1c2d9c793a886bffb5c84558f4a578cd5ba9e777a4e08f66d0cabe05b9aa2ae8d075778b5fbfff318a7f9b6f22e2eff6f79d8c1148941b3974f3e83a4a4f1520ad42336eddc572ec7ea04766eb798b2f1b1b52009b3eeea7741b2c55e3c7c11c5cf6a4e204c6b0d312f49L')
#130980735869820166915378961673985053616333437967010465129375347422685422467108741289450867049512872164121122717189562755537225451541601654287161457532741992656631257785730531708695324795263701463432168260550741424664247703691975301109906771963802876421829743795866930724002326502326044425043768629145738751817
#('e2=', '0x2c09848c6')
#11821140166
#('c2=', '0x79ec6350649377f69b475eca83a7d9d5356a1d62e29933e9c8e2b19b4b23626a581037aba3be6d7f73d5bed049350e41c1ed4cdc3e10ee34ec576ef3449be2f7d930c759612e1c23c4db71d0e5185a80b548031e3857dd93eca4af017fcd25895fcc4e8a2b36c1dd36b8cd9cc9200e2879f025928fe346e2cfae5200e66de6ccL')
#85617516376023924880998582025454125326643952747298674689585292960376505361380587015286284168274943345849500319456811015055565479067002986315364224932800891156699950392485825635963356310734219196066030930641560131738115654849432485054295129781345020589652755082890013375121442287499105819451198402856471094988

#https://blog.csdn.net/chenzzhenguo/article/details/94339659
#b'EIS{Comm0n_Div15or_plus_CRT_is_so_easy|cb2733b9e69ab3a9bd526fa1}'



#n1=0xcfc59d54b4b2e9ab1b5d90920ae88f430d39fee60d18dddbc623d15aae645e4e50db1c07a02d472b2eebb075a547618e1154a15b1657fbf66ed7e714d23ac70bdfba4c809bbb1e27687163cb09258a07ab2533568192e29a3b8e31a5de886050b28b3ed58e81952487714dd7ae012708db30eaf007620cdeb34f150836a4b723L
#145902412361478782344770381873783700413638083575664796147183684992615987925480426688706400688307583005196450858827113757408777361940584125700594767997877530445777012630266331221234501260829837820315200747919668506933176146599166089445798737129024362167061966283411487243534460764772316650320961711082540676899
q1 = 12037827528067911684278967221392433256129944002157200272548317200308481572950474775891360447285969682243206009995242277136633522897723532096467191105943909 
p1 = 12120327527644543811107783655014863098833219936714394976342507913322405566177432644931575840816861543106701611662013978324877080018872656490603706071067111 
#e1=0xfae3aL
#1027642 = 2 · 7 · 11 · 6673
#n2=0xd45304b186dc82e40bd387afc831c32a4c7ba514a64ae051b62f483f27951065a6a04a030d285bdc1cb457b24c2f8701f574094d46d8de37b5a6d55356d1d368b89e16fa71b6603bd037c7f329a3096ce903937bb0c4f112a678c88fd5d84016f745b8281aea8fd5bcc28b68c293e4ef4a62a62e478a8b6cd46f3da73fa34c63L
#149099187170511972630955070342575714830336629001429055523308641067867185643738492089983321303377141971663123411968339764579768625561000509534051657156505686277638053591553620131562538158327446457847814787147698749502556552831112070838138070024147578824279983531049306936118687161116949990664307619657857322083
p2 = 12120327527644543811107783655014863098833219936714394976342507913322405566177432644931575840816861543106701611662013978324877080018872656490603706071067111
q2 = 12301580698247665838432962460247894405698817646605188562297985838079356879336309758823376086396761749681729993573203954506346863479448531269351981555913253
#e2=0x1f9eaeL
#2072238 = 2 · 3 · 7 · 49339


e1 = (2 * 3 * 5 * 49339) 
#1480170
#0x1695ea
e2 = (2 * 31 * 5 * 6673)  
#2068630
#0x1f9096
#n1 = 
#n2 =

def gcd(a, b):
    if a < b:
        a, b = b, a
    while b != 0:
        temp = a % b
        a = b
        b = temp
    return a

#Φ(n) =(p-1) (q-1)
t1 = (p1-1)*(q1-1)
t2 = (p2-1)*(q2-1)
k1 = gcd(e1,(p1-1)*(q1-1))
k2 = gcd(e2,(p2-1)*(q2-1))

print(k1)
print(k2) 

print(t1)
print(t2) 
"""